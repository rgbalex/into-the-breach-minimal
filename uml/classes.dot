digraph "classes" {
rankdir=BT
charset="utf-8"
"itb.entities.BaseEntity.BaseEntity" [color="black", fontcolor="black", label=<{BaseEntity|colour : tuple<br ALIGN="LEFT"/>default_damage : int<br ALIGN="LEFT"/>default_health : int<br ALIGN="LEFT"/>player : UNDEF<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|<I>get_available_attacks</I>()<br ALIGN="LEFT"/><I>get_available_moves</I>()<br ALIGN="LEFT"/>get_colour()<br ALIGN="LEFT"/>get_health()<br ALIGN="LEFT"/>get_position()<br ALIGN="LEFT"/>get_type()<br ALIGN="LEFT"/>is_enemy(_type: EntityType)<br ALIGN="LEFT"/><I>set_defaults</I>()<br ALIGN="LEFT"/>set_health(health: int)<br ALIGN="LEFT"/>set_position(position: tuple[int, int])<br ALIGN="LEFT"/>set_type(type: EntityType)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.tiles.BaseTile.BaseTile" [color="black", fontcolor="black", label=<{BaseTile|<br ALIGN="LEFT"/>|get_contents()<br ALIGN="LEFT"/>get_type()<br ALIGN="LEFT"/>set_contents(contents)<br ALIGN="LEFT"/>set_type(type: TileType)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.board.Board" [color="black", fontcolor="black", label=<{Board|<br ALIGN="LEFT"/>|get_available_moves_depth(mode: PlayerType, depth: int)<br ALIGN="LEFT"/>get_entity_by_coords(x: int, y: int): Optional[tuple[int]]<br ALIGN="LEFT"/>get_root()<br ALIGN="LEFT"/>get_tile(x: int, y: int): int<br ALIGN="LEFT"/>import_level(map_data: list[list[int]], entities: list[tuple[int]])<br ALIGN="LEFT"/>minimax(node: Node, maximisingPlayer: PlayerType, depth)<br ALIGN="LEFT"/>set_tile(x: int, y: int, tile: int)<br ALIGN="LEFT"/>summary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.entities.BugMelee.BugMelee" [color="black", fontcolor="black", label=<{BugMelee|colour : tuple<br ALIGN="LEFT"/>default_damage : int<br ALIGN="LEFT"/>default_health : int<br ALIGN="LEFT"/>player : BUG<br ALIGN="LEFT"/>|get_available_attacks()<br ALIGN="LEFT"/>get_available_moves()<br ALIGN="LEFT"/>set_defaults()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.entities.Building.Building" [color="black", fontcolor="black", label=<{Building|colour : tuple<br ALIGN="LEFT"/>default_damage : int<br ALIGN="LEFT"/>default_health : int<br ALIGN="LEFT"/>player : MECH<br ALIGN="LEFT"/>|get_available_attacks()<br ALIGN="LEFT"/>get_available_moves()<br ALIGN="LEFT"/>set_defaults()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.entities.BaseEntity.EntityType" [color="black", fontcolor="black", label=<{EntityType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"itb.level_importer.LevelImporter" [color="black", fontcolor="black", label=<{LevelImporter|<br ALIGN="LEFT"/>|get_entities(): list[tuple[int]]<br ALIGN="LEFT"/>get_tiles(): list[list[int]]<br ALIGN="LEFT"/>load_level(filename: str): list[list[int]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.__main__.Main" [color="black", fontcolor="black", label=<{Main|SCREEN_HEIGHT : int<br ALIGN="LEFT"/>SCREEN_WIDTH : int<br ALIGN="LEFT"/>board<br ALIGN="LEFT"/>dump_output_txt : bool<br ALIGN="LEFT"/>grid : IsometricGrid<br ALIGN="LEFT"/>level_importer<br ALIGN="LEFT"/>level_to_load : str<br ALIGN="LEFT"/>serialise : bool<br ALIGN="LEFT"/>serialiser<br ALIGN="LEFT"/>show_gui : bool<br ALIGN="LEFT"/>verbose : bool<br ALIGN="LEFT"/>|print()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.entities.MechMelee.MechMelee" [color="black", fontcolor="black", label=<{MechMelee|colour : tuple<br ALIGN="LEFT"/>default_damage : int<br ALIGN="LEFT"/>default_health : int<br ALIGN="LEFT"/>player : MECH<br ALIGN="LEFT"/>|get_available_attacks()<br ALIGN="LEFT"/>get_available_moves()<br ALIGN="LEFT"/>set_defaults()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.minimax_result.MinimaxResult" [color="black", fontcolor="black", label=<{MinimaxResult|node<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"itb.node.Node" [color="black", fontcolor="black", label=<{Node|entity_dict : EntityDictionary<br ALIGN="LEFT"/>string_buff : str<br ALIGN="LEFT"/>|calculate_value(): float<br ALIGN="LEFT"/>count_leaf_nodes(): int<br ALIGN="LEFT"/>count_nodes(): int<br ALIGN="LEFT"/>get_depth(): int<br ALIGN="LEFT"/>get_parent(): Optional['Node']<br ALIGN="LEFT"/>get_player(): PlayerType<br ALIGN="LEFT"/>get_score(): float<br ALIGN="LEFT"/>is_enemy_entity_type(playerType: int): bool<br ALIGN="LEFT"/>is_terminal(): bool<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.entities.BaseEntity.PlayerType" [color="black", fontcolor="black", label=<{PlayerType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"itb.serialise.Serialiser" [color="black", fontcolor="black", label=<{Serialiser|tree : NoneType<br ALIGN="LEFT"/>|serialise(file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.state.State" [color="black", fontcolor="black", label=<{State|<br ALIGN="LEFT"/>|get_available_moves(mode: PlayerType)<br ALIGN="LEFT"/>get_entity_by_coords(x: int, y: int): Optional[tuple[int]]<br ALIGN="LEFT"/>get_valid_entity_moves(entity: tuple[int])<br ALIGN="LEFT"/>list_entities()<br ALIGN="LEFT"/>to_json()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"itb.tiles.BaseTile.TileType" [color="black", fontcolor="black", label=<{TileType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"itb.entities.BugMelee.BugMelee" -> "itb.entities.BaseEntity.BaseEntity" [arrowhead="empty", arrowtail="none"];
"itb.entities.Building.Building" -> "itb.entities.BaseEntity.BaseEntity" [arrowhead="empty", arrowtail="none"];
"itb.entities.MechMelee.MechMelee" -> "itb.entities.BaseEntity.BaseEntity" [arrowhead="empty", arrowtail="none"];
"itb.board.Board" -> "itb.__main__.Main" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="board", style="solid"];
"itb.entities.BaseEntity.EntityType" -> "itb.entities.BaseEntity.BaseEntity" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_type", style="solid"];
"itb.level_importer.LevelImporter" -> "itb.__main__.Main" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="level_importer", style="solid"];
"itb.level_importer.LevelImporter" -> "itb.board.Board" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_l", style="solid"];
"itb.node.Node" -> "itb.serialise.Serialiser" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tree", style="solid"];
"itb.serialise.Serialiser" -> "itb.__main__.Main" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="serialiser", style="solid"];
"itb.tiles.BaseTile.TileType" -> "itb.tiles.BaseTile.BaseTile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_type", style="solid"];
"itb.entities.BaseEntity.PlayerType" -> "itb.node.Node" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_player", style="solid"];
"itb.node.Node" -> "itb.board.Board" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_root", style="solid"];
"itb.node.Node" -> "itb.minimax_result.MinimaxResult" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="node", style="solid"];
"itb.state.State" -> "itb.board.Board" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_state", style="solid"];
"itb.state.State" -> "itb.node.Node" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_state", style="solid"];
}
